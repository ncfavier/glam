-- Guarded recursive streams
consG x s = fold (x, s)
hdG     s = fst unfold s
tlG     s = snd unfold s

mapG f = let { go s = consG (f (hdG s)) (go <*> tlG s) }
         in go

-- Coinductive streams
cons x s = box (consG x (next unbox s))
hd     s = hdG unbox s
tl     s = box prev (tlG unbox s)

-- The stream of natural numbers
natsG = consG 0 (mapG (\n. n + 1) <$> natsG)
nats  = box natsG

-- Print the third natural number, i.e. 2
hd (tl (tl nats))

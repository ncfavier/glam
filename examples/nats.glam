-- Guarded recursive streams
consG x s = fold (x, s)
headG   s = fst unfold s
tailG   s = snd unfold s

mapG f = let { go s = consG (f (headG s)) (go <*> tailG s) }
         in go

-- Coinductive streams
cons x s = box (consG x (next unbox s))
head   s = headG unbox s
tail   s = box prev (tailG unbox s)

-- The stream of natural numbers
natsG = consG 0 (mapG (\n. n + 1) <$> natsG)
nats  = box natsG

-- Print the third natural number, i.e. 2
head (tail (tail nats))

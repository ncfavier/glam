-- Guarded recursive streams
type StreamG a = a * >StreamG a

consG : forall a. a -> >StreamG a -> StreamG a
consG x s = fold (x, s)

headG : forall a. StreamG a -> a
headG s = fst unfold s

tailG : forall a. StreamG a -> >StreamG a
tailG s = snd unfold s

mapG f = let { go s = consG (f (headG s)) (go <*> tailG s) }
         in go

-- Coinductive streams
type Stream a = #StreamG a

cons : Int -> Stream Int -> Stream Int
cons x s = box (consG x (next unbox s))

head s = headG unbox s

tail : Stream Int -> Stream Int
tail s = box prev (tailG unbox s)

-- The stream of natural numbers
natsG = consG 0 (mapG (\n. n + 1) <$> natsG)
nats  = box natsG

-- Print the third natural number, i.e. 2
head (tail (tail nats))

-- A guarded variant of Curry's Y combinator.

type Mu a = >Mu a -> a

Mu : forall a. (>Mu a -> a) -> Mu a
Mu x = fold x

uM : forall a. Mu a -> >Mu a -> a
uM x = unfold x

Y : forall a. (>a -> a) -> a
Y f = let { x x' = f (uM <$> x' <*> next x') }
      in x (next (Mu x))
